xlab = "Valeurs de yrep", ylab = "Densité")
points(n,dgeom(n,EMV_p),col=2)
points(n,dgeom(n,EMV_p),col=2,add=T)
plot(densite_y,type="h", main = "Diagramme en bâtons de yrep normalisé en densité",
xlab = "Valeurs de yrep", ylab = "Densité")
points(n,dgeom(n,EMV_p),col=2,add=T)
plot(densite_y,type="h", main = "Diagramme en bâtons de yrep normalisé en densité",
xlab = "Valeurs de yrep", ylab = "Densité")
points(n,dgeom(n,EMV_p),col=2)
# Paramètre estimé p
p_estime <- EMV_p
# Densité géométrique estimée
densite_geometrique <- dgeom(0:max(y), prob = p_estime)
# Tracer le diagramme en bâtons de yrep normalisé en densité avec la densité géométrique estimée
barplot(densite_yrep, main = "Diagramme en bâtons de yrep normalisé en densité avec densité géométrique estimée", xlab = "Valeurs de yrep", ylab = "Densité")
lines(densite_geometrique, col = "red")
# QQplot de l'échantillon y
qqplot(qgeom(ppoints(length(y)), prob = p_estime), y)
abline(0, 1, col = "blue", lwd = 2)
## 2)
elisa = read.table(file="elisa.txt", header=T,dec=".")
head(elisa)
n = dim(elisa) # 16 lignes et 2 colonnes
plot(elisa$logd,elisa$OD) ## beta1 = 5, beta2 = 1.5
# 5)
nlogvrais = fonction(beta) -logvrais
########################################
# 1- Estimation d'une densité
#####################################
## 1)
set.seed(0509)
n = 20
p = 0.3
y = rgeom(n,p)
mean(y) ## 1.45
yrep=factor(y)
densite_y <- table(y) / length(y) ## normalise yrep en densté
# diagramme en batons
plot(densite_y,type="h", main = "Diagramme en bâtons de yrep normalisé en densité",
xlab = "Valeurs de yrep", ylab = "Densité")
table(yrep)
pint(0:6,dgeom(0:6, 0.3,col=2))
point(0:6,dgeom(0:6, 0.3,col=2))
points(0:6,dgeom(0:6, 0.3,col=2))
?nls
fit.nls = nls(ODi~freg(beta,logd),data=elisa,start = c(1,1,1,1))
fit.nls = nls(OD~freg(beta,logd),data=elisa,start = c(1,1,1,1))
fit.nls = nls(OD~freg(beta,logd),data=elisa,start = list(betac(1,1,1,1)))
fit.nls = nls(OD~freg(beta,logd),data=elisa,start = list(beta=c(1,1,1,1)))
freg <- function(beta,logd) {
beta1 <- beta[1]
beta2<- beta[2]
beta3<- beta[3]
beta4<- beta[4]
beta1=(beta2-beta1)/(1+exp(beta3*(logd-beta4)))
}
fit.nls = nls(OD~freg(beta,logd),data=elisa,start = list(beta=c(1,1,1,1)))
beta = c(beta1,beta2,beta3,beta4)
#3) fonction de régression
beta1=1; beta2=1; beta3 = 1; beta4 = 1
beta = c(beta1,beta2,beta3,beta4)
fit.nls = nls(OD~freg(beta,logd),data=elisa,start = list(beta=c(1,1,1,1)))
fit.nls = nls(OD~freg(beta,logd),data=elisa,start = list(beta))
fit.nls = nls(OD~freg(beta,logd),data=elisa,start = beta)
fit.nls = nls(OD~freg(beta,logd),data=elisa,start =list(beta=c(1,2,3,4)))
fit.nls = nls(OD~freg(beta,logd),data=elisa,start =list(beta=c(1,2,3,4)))
p=0.3
n=20
# échantillon de Bernoulli de taille n de paramètre p
Y=rbinom(n,1,p)
# log-vraisemblance (forme développée)
logL=function(p,ech=Y) sum(Y)*log(p)+(length(Y)-sum(Y))*log(1-p)
logL(seq(0.1,0.9,by=0.1),Y)
# tracé de la log-vraisemblance
curve(logL(x,ech=Y),from=0,to=1,
main="log-vraisemblance de l'échantillon",
ylab="logL(p)",xlab="p",
xlim=c(0,1),ylim=c(-70,0))
EMV=mean(Y)
abline(v=EMV,col="red",lty=2)
points(EMV,logL(EMV),pch=19,col=2)
text(0.6,-40,"p=0.3")
text(0.6,-50,paste("EMV=",round(EMV,2)),col="red")
mommo <- read.table(file="mammogrphic.data.txt", header=T,sep=" ")
mommo <- read.table(file="mammographic.data.txt", header=T,sep=" ")
head(mommo)
summary(mommo)
table(mommo$Y)
str(mommo)
mommo$shape=factor(mommo$shape)
mommo$margin=factor(mommo$margin)
mommo$density=factor(mommo$density)
mommo$Y=factor(mommo$Y)
summary(mommo)
## shape avec 4 modalités, margin avec 5 modalités, density avec 4 modalités et Y avec 2 modalités
# on peut faire un boxplot de l'age en fct de Y
boxplot(age~Y, data=mommo)
# 2)
?glm
glm(formula = Y ~ age, family = binomial, data=mommo)
to_glm = glm(formula = Y ~ age, family = binomial, data=mommo)
summary(to_glm)
proba_tumeur_maligne = exp(-4.421874 + 0.077628 * 30)/(1+exp(-4.421874 + 0.077628 * 30))
predict.glm
?predict.glm
predict.glm(to_glm,data.frame(age=30))
predict.glm(to_glm,data.frame(age=30), type=response)
predict.glm(to_glm,data.frame(age=30), type="response")
plot(Y~age, data = mommo)
# ------------- régression logistique
########################################"
mommo <- read.table(file="mammographic.data.txt", header=T,sep=" ")
plot(Y~age, data = mommo)
curve(predict(to_glm,data.frame(age=x), type = "response", add = T))
plot(Y~age, data = mommo) ## il ne faut pas mettre y en factor
curve(predict(to_glm,data.frame(age=x), type = "response", add = T))
plot(Y~age, data = mommo) ## il ne faut pas mettre y en factor
curve(predict(to_glm,data.frame(age=x),type ="response",add=T))
plot(Y~age, data = mommo) ## il ne faut pas mettre y en factor
curve(predict(to_glm,data.frame(age=x),type ="response",add=T))
mommo$shape=factor(mommo$shape)
mommo$margin=factor(mommo$margin)
mommo$density=factor(mommo$density)
mommo$Y=factor(mommo$Y)
## quelle est la dimension du modèles
table(shape)
# ------------- régression logistique
########################################"
mommo <- read.table(file="mammographic.data.txt", header=T,sep=" ")
mommo$shape=factor(mommo$shape)
mommo$margin=factor(mommo$margin)
mommo$density=factor(mommo$density)
mommo$Y=factor(mommo$Y)
## quelle est la dimension du modèles
table(shape)
## quelle est la dimension du modèles
table(mommo$shape)
summry(mommo)
summary(mommo)
glm(formula = Y~., family = binomial,data = mommo)
t_glm = glm(formula = Y~., family = binomial,data = mommo)
summary(t_glm)
data <- read.table(file="mammographic.data.txt", header=T,sep=" ")
head(data)
data$shape=factor(data$shape)
data$margin=factor(data$margin)
data$density=factor(data$density)
data$Y=factor(data$Y)
glm = glm(formula = Y~., family = binomial,data = data)
summary(glm)
View(data)
# la variable shape est-elle sigificative dans le modèle complet
glm_sans_shape = glm(formula = Y~.,-shape, family = binomial,data = data)
# la variable shape est-elle sigificative dans le modèle complet
glm_sans_shape = glm(formula = Y~age+margin+density, family = binomial,data = data)
summary(glm_sans_shape)
names(glm_sans_shape)
logLik(glm_sans_shape)
logLik(glm)
glm_sans_shape = glm(formula = Y~.-, family = binomial,data = data)
glm_sans_shape = glm(formula = Y~.-shape, family = binomial,data = data)
TRV=2*(logLik(glm_sans_shape)-logLik(glm))
TRV
TRV=2*(logLik(logLik(glm))-logLik(glm))
TRV
TRV=2*(logLik(glm_sans_shape)-logLik(glm))
TRV
TRV=2*(logLik(glm_sans_shape)/logLik(glm))
TRV
TRV=2*(logLik(glm_sans_shape)-logLik(glm))
TRV
p_value=2*(1-pchisq(TRV,3))
p_value=1-pchisq(TRV,3)
glm_sans_density = glm(formula = Y~age+margin, family = binomial,data = data)
summary(glm_sans_density)
glm_sans_density = glm(formula = Y~age+shape+margin, family = binomial,data = data)
summary(glm_sans_density)
TRV=2*(logLik(glm_sans_density)-logLik(glm))
TRV
glm = glm(formula = Y~., family = binomial,data = data)
# la variable shape est-elle sigificative dans le modèle complet
glm_sans_shape = glm(formula = Y~age+margin+density, family = binomial,data = data)
TRV=2*(logLik(glm_sans_shape)-logLik(glm))
TRV
glm_sans_density = glm(formula = Y~age+shape+margin, family = binomial,data = data)
TRV=2*(logLik(glm_sans_density)-logLik(glm))
p_value=1-pchisq(TRV,3)
lr_test <- lrtest(glm_sans_density, glm)
anova(glm_sans_density, glm)
TRV=2*(logLik(glm)-logLik(glm_sans_density))
TRV
TRV=2*(logLik(glm)-logLik(glm_sans_shape))
TRV
p_value=1-pchisq(TRV,3)
TRV=2*(logLik(glm)-logLik(glm_sans_density))
TRV
p_value=1-pchisq(TRV,3)
anova(glm_sans_density, glm, test = "TRV")
anova(glm_sans_density, glm, test = "LRT")
anova(glm_sans_density, glm, test = "chisq")
anova(glm_sans_density, glm, test = "Chisq")
anova(glm_sans_shape, glm, test = "LRT")
### prédiction
new_data <- data.frame(age = 50, shape = "3", margin = "1")
predicted_prob <- predict(glm, newdata = new_data, type = "response")
### prédiction
new_data <- data.frame(age = 50, shape = "3", margin = "1", density = "1")
predicted_prob <- predict(glm, newdata = new_data, type = "response")
print(predicted_prob)
### prédiction
new_data <- data.frame(age = 50, shape = "3", margin = "1", density = "1")
predicted_prob <- predict(glm, newdata = new_data)
print(predicted_prob)
predicted_prob <- predict(glm_sans_density, newdata = new_data)
print(predicted_prob)
predicted_prob <- predict(glm_sans_density, newdata = new_data, type = "response")
print(predicted_prob)
## sans type on retrouve xB
## avec type on retrouve P(y=1)
## IC
confidence_interval <- predict(glm_sans_density, newdata = new_data, interval = "confidence", level = 0.95)
print(confidence_interval)
## sans type on retrouve xB
## avec type on retrouve P(y=1)
## IC
xbeta=predict(glm_sans_density, newdata = new_data, type = "link");xbeta
vcov(xbeta)
vcov(glm_sans_density)
v = vcov(glm_sans_density)
sdbeta=diag(v)
sdbeta=sqrtdiag(v)
sdbeta=sqrt(diag(v))
sdbeta=
confidence_interval <- predict(glm_sans_density, newdata = new_data, interval = "confidence", level = 0.95)
sdbeta
v = vcov(glm_sans_density)
v
sdbeta=sqrt(diag(v))
sdbeta
install.packages(c("curl", "data.table", "datamods", "DBI", "ggplot2", "igraph", "RcppEigen", "renv", "shinyWidgets", "writexl", "xfun"))
?predict
### prédiction
new_data <- data.frame(age = 50, shape = "3", margin = "1", density = "1")
xbeta=predict(glm_sans_density, newdata = new_data, type = "link", se.fit = T);xbeta
ICxbeta=c(xbeta$fit-qnorm(0.975)*xbeta$fit,xbeta$fit+qnorm(0.975)*xbeta$fit)
ICxbeta
t=c(0.5,1,2,4,8,9,10)
t=c(0.5,1,2,4,8,9,10)
Y=c(.68,.45,2.5,6.19,56.1,89.8,147.7,1.58,2.66,2.04,7.85,54.2,90.2,146.3)
roissance = data.frame(t=rep(t,2),jour=c(rep(1,7),rep(2,7)),y=y)
t=c(0.5,1,2,4,8,9,10)
y=c(.68,.45,2.5,6.19,56.1,89.8,147.7,1.58,2.66,2.04,7.85,54.2,90.2,146.3)
roissance = data.frame(t=rep(t,2),jour=c(rep(1,7),rep(2,7)),y=y)
dim(roissance)
View(roissance)
?nls
x=c(rep(0,70),rep(1,38),rep(2,17), rep(3,10), rep(4,9),rep(5,3),rep(6,2),7)
sum(x)
n=length(x);n
nlogL=function(lambda) -sum(log(dpois(x,lambda)))
res=optim(1,nlogL,hessian=T,method="Brent",lower=0,upper=7)
res
?optim
p=0.3
n=20
# échantillon de Bernoulli de taille n de paramètre p
Y=rbinom(n,1,p)
# log-vraisemblance (forme développée)
logL=function(p,ech=Y) sum(Y)*log(p)+(length(Y)-sum(Y))*log(1-p)
logL(seq(0.1,0.9,by=0.1),Y)
# tracé de la log-vraisemblance
curve(logL(x,ech=Y),from=0,to=1,
main="log-vraisemblance de l'échantillon",
ylab="logL(p)",xlab="p",
xlim=c(0,1),ylim=c(-70,0))
EMV=mean(Y)
abline(v=EMV,col="red",lty=2)
points(EMV,logL(EMV),pch=19,col=2)
text(0.6,-40,"p=0.3")
text(0.6,-50,paste("EMV=",round(EMV,2)),col="red")
# on répète l'expérience pour observer la variabilité de l'EMV
# (et de la vraisemblance)
Y=rbinom(n,1,p)
curve(logL(x,ech=Y),from=0,to=1,lty=2,add=T)
abline(v=mean(Y),lty=2)
df=read.table("duree_de_vie.txt",skip=1,header=T)
summary(df)
times=df$times
n=length(times); n; mean(times); var(times)
# histogramme normalisé en densité
hist(times,proba=T)
# log-vraisemblance de Weibull
LogL=function(a) sum(log(dweibull(times,a)))
LogL(c(1,2,3,4))
# Vectorisation de la fonction LogL
vLogL=Vectorize(LogL)
vLogL(c(1,2,3,4))
# tracé de la log-vraisemblance
curve(vLogL,from=0.17,to=6, main="log-vraisemblance de l'échantillon",
ylab="LogL(a)",xlab="valeur du paramètre") # maximum obtenu entre 2 et 2.5
# optimisation de la log-vraisemblance
opt=optimize(LogL, interval = c(0.17,6), maximum = TRUE)
print(opt)
# [1] 2.258714 le maximum est global sur l'intervalle considéré
EMV=opt$maximum
abline(v=EMV,col="red",lty=2)
text(3,-45,paste("EMV=",round(EMV,2)),col="red")
# tracé de la densité estimée
hist(times,proba=T)
curve(dweibull(x,shape=EMV),from=0,to=1.8,add=T,col=2)
if(!require(pacman)) install.packages("pacman")
p_load(ggplot2)
P_load(ggplot2)
rm(list= ls())
tumeur=read.table("mammographic.data",header=T)
tumeur=read.table("mammographic.data.txt",header=T)
str(tumeur)
table(tumeur$Y) # les nb de cas positifs/négatifs sont équilibrés
table(tumeur$shape)
hist(tumeur$age)
boxplot(age~Y,data=tumeur)
t0.glm=glm(Y~age,data=tumeur,family=binomial)
summary(t0.glm)
# prediction de la probabilité d'une tumeur maligne à 30 ans:
predict(t0.glm,data.frame(age=30),type="response")
exp(coef(t0.glm)[1]+coef(t0.glm)[2]*30)/
(1+exp(coef(t0.glm)[1]+coef(t0.glm)[2]*30)) # idem
tumeur$shape=factor(tumeur$shape)
tumeur$margin=factor(tumeur$margin)
tumeur$density=factor(tumeur$density)
tumeur$Y=factor(tumeur$Y)
# estimation du modèle complet
t.glm=glm(Y~.,data=tumeur, family=binomial)
summary(t.glm)
IC_age <- c(0.054552-qnorm(0.975)*0.007812, 0.054552+qnorm(0.975)*0.007812)
IC_age
# la p-value montre que la variable age est significativement différente de zéro. De plus son IC ne contient la vaieur zéro
model_sans_shape <- glm(Y~.-shape,family = binomial,data = tumeur)
summary(model_sans_shape)
## test de rapport de vraisemblance
trv <- 2*(logLik(model_sans_shape)-logLik(t.glm))
trv
qchisq(0.95,3)
# la trv < c_alpha donc on ne rejet pas H0 par conséquent shape n'est pas significative
anova(model_sans_shape,t.glm)
cat("Statistique de test TRV :", trv, "\n")
cat("Degré de liberté :", df, "\n")
cat("Degré de liberté :", df)
cat("P-valeur :", p_value, "\n")
df <- attr(logLik(t.glm), "df") - attr(logLik(model_sans_shape), "df")  # Degré de liberté
p_value <- pchisq(trv, df, lower.tail = FALSE)  # Calcul de la p-valeur
cat("Statistique de test TRV :", trv, "\n")
cat("Degré de liberté :", df, "\n")
cat("P-valeur :", p_value, "\n")
p_value <- pchisq(trv, df, lower.tail = TRUE)  # Calcul de la p-valeur
cat("P-valeur :", p_value, "\n")
p_value <- qchisq(trv, df, lower.tail = FALSE)  # Calcul de la p-valeur
abs(trv)   ## 'log Lik.' -35.65538 (df=9)
pt(0.95,3)  ## [1] 7.814728
qt(0.95,3)  ## [1] 7.814728
# la abs(trv) > c_alpha donc on rejet H0 par conséquent shape est significativement différent de zéro
anova(model_sans_shape,t.glm)
p_value <- 2*(1-pt(abs(trv),3))  # Calcul de la p-valeur
cat("P-valeur :", p_value, "\n")
p_value <- 2*(1-pchsq(abs(trv),3))  # Calcul de la p-valeur
p_value <- 2*(1-pchisq(abs(trv),3))  # Calcul de la p-valeur
cat("P-valeur :", p_value, "\n")
p_value <- *(1-pchisq(abs(trv),3))  # Calcul de la p-valeur
p_value <- (1-pchisq(abs(trv),3))  # Calcul de la p-valeur
cat("P-valeur :", p_value, "\n")
tumeur=read.table("mammographic.data",header=T)
tumeur=read.table("mammographic.data.txt",header=T)
tumeur$shape=factor(tumeur$shape)
tumeur$margin=factor(tumeur$margin)
tumeur$density=factor(tumeur$density)
tumeur$Y=factor(tumeur$Y)
# estimation du modèle complet
t.glm=glm(Y~.,data=tumeur, family=binomial)
summary(t.glm)
IC=c(coef(t.glm)[2]-qnorm(0.975)*sqrt(vcov(t.glm)[2,2]),
coef(t.glm)[2]+qnorm(0.975)*sqrt(vcov(t.glm)[2,2]))
IC
# même résultat que :
confint.default(t.glm,2)
t2.glm=glm(Y~.-shape,data=tumeur, family=binomial)
# test de sous-modèle par rapport de vraisemblance
2*(logLik(t.glm)-logLik(t2.glm))
# 'log Lik.' 35.65538
qchisq(0.95,3)
# [1] 7.814728
1-pchisq(35.65538,3)
anova(t2.glm,t.glm,test="LRT") # idem
anova(t2.glm,t.glm,test="Chisq") # idem
t3.glm=glm(Y~.-margin,data=tumeur, family=binomial)
TRV=2*(logLik(t.glm)-logLik(t3.glm))
# 'log Lik.' 35.17974 (df=12)
1-pchisq(TRV,4)
t4.glm=glm(Y~.-density,data=tumeur, family=binomial)
TRV=2*(logLik(t.glm)-logLik(t4.glm))
1-pchisq(TRV,3)
# 0.3380355
anova(t4.glm,t.glm,test="LRT") # idem
newdata1 <- data.frame(age=50,shape="3",margin="1",density="1")
pred <-predict(t.glm, newdata = newdata1, type = "response") # 0.3143653
cbind(newdata1,pred)
## IC de la prédiction
predl <-predict(t.glm, newdata = newdata1, type = "link",se=TRUE)
# plogis = fonction inverse de logit = exp(x)/(1+exp(x))
cbind(plogis(predl$fit-1.96*predl$se.fit),
plogis(predl$fit),
plogis(predl$fit+1.96*predl$se.fit))
log(exp(-1.147)/(1-exp(-1.147)))
462-9
# données
y=c(9.82, 7.35, 4.41, 3.74 ,1.30, 0.85, 0.27,   0.23,  0.54)
time=c(1,  4,  7,  10 , 13,  16,  22,  25,  28)
n=length(time)
PK=data.frame(time=time,y=y)
plot(time,y,pch=20,col="red")
# fonction de régression
freg=function(beta,time)
{
k=beta[1]
V=beta[2]
(100/V)* exp(-k*time)
}
# log-vraisemblance
logvrais=function(beta){sum(log(dnorm(y,freg(beta,time))))}
# ordonnée à l'origine V=10
# pente à l'origine 10*k=.5
nlogvrais=function(beta){-logvrais(beta)}
res=optim(par=c(.5,10),nlogvrais)
res$par
# [1] 0.1358591 8.5819458
res$convergence
# ajustement
curve(freg(res$par,x),from=0,to=28,add=T,col="blue" )
# ----------------------------------------------------------------------------
# estimation avec nls
# ----------------------------------------------------------------------------
beta0=c(0.5,10)
PK.nls=nls(y~freg(beta,time),data=PK,
start=list(beta=beta0),trace=T)
PK.nls$convInfo # pour voir si l'algo à converger (fournis les infos sur la convergence)
PK.nls$control #  renvoie les paramètres de contrôle associés au processus d'optimisation
summary(PK.nls)
coef(PK.nls) # renvoie les paramètres d'espérance du modèle (ici k et v)
fitted(PK.nls)  # renvoie les valeurs ajustées par le modèle
resid(PK.nls)   # renvoie les résidus du modèle
$residuals
PK.nls$residuals
## matrice de variance estimée
Var=vcov(PK.nls) # calcule la matrice de variance-covariance
var
sqrt(Var[2,2])   # [1] 0.4631738 on retrouve écart-type de beta2
sqrt(Var[1,1]) # [1] 0.01137273 on retrouve écart-type de beta1
solve(vcov(PK.nls))   # pour calculer l'inverse de la matrice de covariance.
?nls
?nlm
tumeur=read.table("mammographic.data.txt",header=T)
str(tumeur) # Type des covariables
#############################################################################
tumeur=read.table("mammographic.data.txt",header=T)
str(tumeur) # Type des covariables
table(tumeur$Y) # les nb de cas positifs/négatifs sont équilibrés
table(tumeur$shape)
hist(tumeur$age)
boxplot(age~Y,data=tumeur)
########################################
# Estimation avec age unique covariable continue
t0.glm=glm(Y~age,data=tumeur,family=binomial)
summary(t0.glm)
# prediction de la probabilité d'une tumeur maligne à 30 ans:
predict(t0.glm,data.frame(age=30),type="response")
exp(coef(t0.glm)[1]+coef(t0.glm)[2]*30)/
(1+exp(coef(t0.glm)[1]+coef(t0.glm)[2]*30)) # idem
# x--> exp(x)/(1+exp(x)) est l'inverse du lien logit
# graphe des observés-ajustés
plot(Y~age,data=tumeur,main="P(Y=1) estimée")
curve(predict(t0.glm,data.frame(age=x),type="response"),add=T)
########################################
# les autres covariables sont discrètes : facteurs dans R
tumeur$shape=factor(tumeur$shape)
tumeur$margin=factor(tumeur$margin)
tumeur$density=factor(tumeur$density)
tumeur$Y=factor(tumeur$Y)
# estimation du modèle complet
t.glm=glm(Y~.,data=tumeur, family=binomial)
summary(t.glm)
# dimension du modèle = 12 paramètes (identifiables)
# ddl du modèle = length(tumeur$Y)-12
#######################################
IC_age <- c(0.054552-qnorm(0.975)*0.007812, 0.054552+qnorm(0.975)*0.007812)
IC_age  ### [1] 0.03924076 0.06986324
# la p-value montre que la variable age est significativement différente de zéro. De plus son IC ne contient la vaieur zéro
model_sans_shape <- glm(Y~.-shape,family = binomial,data = tumeur)
summary(model_sans_shape)
## test de rapport de vraisemblance
trv <- 2*(logLik(model_sans_shape)-logLik(t.glm))
abs(trv)   ## 'log Lik.' 35.65538 (df=9)
qchisq(0.95,3)  ## [1] 2.353363
# la abs(trv) > c_alpha donc on rejet H0 par conséquent shape est significativement différent de zéro
anova(model_sans_shape,t.glm)
df <- attr(logLik(t.glm), "df") - attr(logLik(model_sans_shape), "df")  # Degré de liberté
p_value <- (1-pchisq(abs(trv),3))  # Calcul de la p-valeur
cat("Statistique de test TRV :", trv, "\n")
cat("Degré de liberté :", df, "\n")
cat("P-valeur :", p_value, "\n")
dim(tumeur)
tumeur=read.table("mammographic.data.txt",header=T)
View(tumeur)
str(tumeur) # Type des covariables
